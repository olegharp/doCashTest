@using System;
@using System.Net;
@using System.Net.Configuration;
@using System.Reflection;
@using System.Text

@functions{


    // Enable/disable useUnsafeHeaderParsing.
    // See http://o2platform.wordpress.com/2010/10/20/dealing-with-the-server-committed-a-protocol-violation-sectionresponsestatusline/
    public static bool ToggleAllowUnsafeHeaderParsing(bool enable)
    {
        //Get the assembly that contains the internal class
        Assembly assembly = Assembly.GetAssembly(typeof(SettingsSection));
        if (assembly != null)
        {
            //Use the assembly in order to get the internal type for the internal class
            Type settingsSectionType = assembly.GetType("System.Net.Configuration.SettingsSectionInternal");
            if (settingsSectionType != null)
            {
                //Use the internal static property to get an instance of the internal settings class.
                //If the static instance isn't created already invoking the property will create it for us.
                object anInstance = settingsSectionType.InvokeMember("Section",
                BindingFlags.Static | BindingFlags.GetProperty | BindingFlags.NonPublic, null, null, new object[] { });
                if (anInstance != null)
                {
                    //Locate the private bool field that tells the framework if unsafe header parsing is allowed
                    FieldInfo aUseUnsafeHeaderParsing = settingsSectionType.GetField("useUnsafeHeaderParsing", BindingFlags.NonPublic | BindingFlags.Instance);
                    if (aUseUnsafeHeaderParsing != null)
                    {
                        aUseUnsafeHeaderParsing.SetValue(anInstance, enable);
                        return true;
                    }

                }
            }
        }
        return false;
    }

    public static string setCommand(string ip, string command){
        var output = new StringBuilder();
        var builder = new UriBuilder(ip + "?" + command);
        var uri = builder.Uri;
        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);
        request.Method = "GET";
        request.Accept = "application/json";
        try{
            HttpWebResponse response = (HttpWebResponse) request.GetResponse();
            StreamReader reader = new StreamReader(response.GetResponseStream()); 
            output.Append(reader.ReadToEnd()); 
            response.Close(); 
            return output.ToString();       
        }catch(Exception ex){
            output.Append(ex.Message);
            return output.ToString(); 
        }
    }

}